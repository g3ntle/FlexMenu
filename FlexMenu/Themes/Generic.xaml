<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:FlexMenu.Controls"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:ei="clr-namespace:Microsoft.Expression.Interactivity.Core;assembly=Microsoft.Expression.Interactions">

    <!--#region Colors-->
    
    <Color x:Key="ColorGrey1">#FEFEFE</Color>
    <Color x:Key="ColorGrey2">#F4F4F4</Color>
    <Color x:Key="ColorGrey3">#ECECEC</Color>
    <Color x:Key="ColorGrey4">#666666</Color>
    <Color x:Key="ColorRed1">#E74C3C</Color>
    <Color x:Key="ColorRed2">#C0392B</Color>
    <Color x:Key="ColorGreen1">#27AE60</Color>
    <Color x:Key="ColorGreen2">#2BBC68</Color>
    
    <!--#endregion-->
    
    <!--#region Brushes-->
    
    <SolidColorBrush x:Key="BrushGrey1" Color="{StaticResource ColorGrey1}"/>
    <SolidColorBrush x:Key="BrushGrey2" Color="{StaticResource ColorGrey2}"/>
    <SolidColorBrush x:Key="BrushGrey3" Color="{StaticResource ColorGrey3}"/>
    <SolidColorBrush x:Key="BrushGrey4" Color="{StaticResource ColorGrey4}"/>
    <SolidColorBrush x:Key="BrushRed1" Color="{StaticResource ColorRed1}"/>
    <SolidColorBrush x:Key="BrushRed2" Color="{StaticResource ColorRed2}"/>
    <SolidColorBrush x:Key="BrushGreen1" Color="{StaticResource ColorGreen1}"/>
    <SolidColorBrush x:Key="BrushGreen2" Color="{StaticResource ColorGreen2}"/>

    <!--#endregion-->

    <!--#region FlexLabel Style-->
    
    <Style x:Key="FlexLabel" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexMenuStyle-->
    
    <Style x:Key="FlexMenuStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{StaticResource BrushGrey1}"/>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexMenuItemStyle-->

    <Style x:Key="FlexMenuItemStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{StaticResource BrushGrey1}"/>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexMenuItemImageStyle-->

    <Style x:Key="FlexMenuItemIconStyle" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0 5 10 5"/>
        <Setter Property="Width" Value="25px"/>
        <Setter Property="Height" Value="25px"/>
    </Style>

    <!--#endregion-->
    
    <!--#region FlexMenuItemLabelStyle-->

    <Style x:Key="FlexMenuItemLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource FlexLabel}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="10 5 0 5"/>
        <Setter Property="FontSize" Value="11pt"/>
        <Setter Property="Foreground" Value="{StaticResource BrushGrey4}"/>
    </Style>

    <!--#endregion-->

    <!--#region FlexHeaderImageStyle-->
    
    <Style x:Key="FlexHeaderImageStyle" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="25px"/>
        <Setter Property="Height" Value="25px"/>
        <Setter Property="Margin" Value="0 0 10 0"/>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexHeaderLabelStyle-->
    <Style x:Key="FlexHeaderLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource FlexLabel}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10 0 0 0"/>
        
        <Setter Property="FontSize" Value="13pt"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <!--#endregion-->

    <!--#region FlexBreadcrumbsStyle-->

    <Style x:Key="FlexBreadcrumbsStyle" TargetType="{x:Type Grid}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexBreadcrumbStyle-->

    <Style x:Key="FlexBreadcrumbStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="0 0 5 0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Opacity=".2" Color="White"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Opacity=".2" Color="White"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexBreadcrumbLabelStyle-->

    <Style x:Key="FlexBreadcrumbLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource FlexLabel}">
        <Setter Property="Padding" Value="3 1 3 1"/>
        <Setter Property="FontSize" Value="9pt"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexLightboxOuterStyle-->

    <Style x:Key="FlexLightboxOuterStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="Black" Opacity=".75"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexLightboxInnerStyle-->

    <Style x:Key="FlexLightboxInnerStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="White"/>
    </Style>

    <!--#endregion-->

    <!--#region FlexLightboxLabelStyle-->

    <Style x:Key="FlexLightboxLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource FlexLabel}">
        <Setter Property="FontSize" Value="14pt"/>
    </Style>

    <!--#endregion-->

    <!--#region FlexLightboxImageStyle-->

    <Style x:Key="FlexLightboxImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="25"/>
    </Style>

    <!--#endregion-->

    <!--#region FontAwesomeLabelStyle-->

    <Style x:Key="FontAwesomeLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="pack://application:,,,/FlexMenu;component/Resources/#FontAwesome" />
    </Style>
    
    <!--#endregion-->
    
    <!--#region FlexLightboxCloseStyle-->

    <Style x:Key="FlexLightboxCloseStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="25"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Outer" Background="{StaticResource BrushRed1}" CornerRadius="25" BorderThickness="0">
                        <Grid>
                            <Label Content="&#xf00d;" Foreground="White"
                                   Style="{StaticResource FontAwesomeLabelStyle}"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"/>
                        </Grid>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ColorRed2}"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        Storyboard.TargetName="Outer"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region FlexLightbox-->

    <Style TargetType="{x:Type local:FlexLightbox}">
        <Setter Property="Panel.ZIndex" Value="1000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlexLightbox}">
                    <Grid x:Name="Container" Visibility="Collapsed">
                        <Border x:Name="Outer" Style="{StaticResource FlexLightboxOuterStyle}">
                            <Grid>
                                <Grid x:Name="Inner" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource FlexLightboxInnerStyle}">
                                    <Button x:Name="btnClose" Margin="-12.5"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Top"
                                            Command="{Binding Command, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContentControl}}}"
                                            Style="{StaticResource FlexLightboxCloseStyle}"/>
                                    <StackPanel Orientation="Vertical" Margin="20">
                                        <StackPanel Orientation="Horizontal">
                                            <Image Source="{Binding Icon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContentControl}}}"
                                                   Style="{StaticResource FlexLightboxImageStyle}"/>
                                            <Label Content="{Binding Title, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContentControl}}}"
                                                   Style="{StaticResource FlexLightboxLabelStyle}"/>
                                        </StackPanel>
                                        <ContentPresenter/>
                                    </StackPanel>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsOpen, RelativeSource={RelativeSource Self}}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="Inner" Storyboard.TargetProperty="Margin">
                                            <EasingThicknessKeyFrame KeyTime="0:0:0" Value="0 50 0 0">
                                                <EasingThicknessKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingThicknessKeyFrame.EasingFunction>
                                            </EasingThicknessKeyFrame>
                                            <EasingThicknessKeyFrame KeyTime="0:0:.5" Value="0 0 0 0">
                                                <EasingThicknessKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingThicknessKeyFrame.EasingFunction>
                                            </EasingThicknessKeyFrame>
                                        </ThicknessAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Container" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Container" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="1">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="Inner" Storyboard.TargetProperty="Margin">
                                            <EasingThicknessKeyFrame KeyTime="0:0:0" Value="0 0 0 0">
                                                <EasingThicknessKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingThicknessKeyFrame.EasingFunction>
                                            </EasingThicknessKeyFrame>
                                            <EasingThicknessKeyFrame KeyTime="0:0:.5" Value="0 50 0 0">
                                                <EasingThicknessKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingThicknessKeyFrame.EasingFunction>
                                            </EasingThicknessKeyFrame>
                                        </ThicknessAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Container" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:.5" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Container" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->
    
    <!--#region FlexMenu-->
    
    <Style TargetType="{x:Type local:FlexMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlexMenu}">
                    <Grid Style="{StaticResource FlexMenuStyle}">
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexMenuItem-->
    
    <Style TargetType="{x:Type local:FlexMenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlexMenuItem}">
                    <Grid x:Name="gridContainer" Style="{StaticResource FlexMenuItemStyle}">
                        <Image x:Name="imgIcon" 
                               Style="{StaticResource FlexMenuItemIconStyle}"
                               Source="{Binding Icon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}"/>
                        <Label x:Name="lblContent" 
                               Style="{StaticResource FlexMenuItemLabelStyle}"
                               Content="{Binding Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}"/>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ColorGrey2}"
                                                        Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)"
                                                        Storyboard.TargetName="gridContainer"/>
                                        <ColorAnimation To="{StaticResource ColorGreen1}"
                                                        Storyboard.TargetProperty="(Label.Foreground).(SolidColorBrush.Color)"
                                                        Storyboard.TargetName="lblContent"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ColorGrey3}"
                                                        Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)"
                                                        Storyboard.TargetName="gridContainer"/>
                                        <ColorAnimation To="{StaticResource ColorGreen1}"
                                                        Storyboard.TargetProperty="(Label.Foreground).(SolidColorBrush.Color)"
                                                        Storyboard.TargetName="lblContent"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexHeader-->
    
    <Style TargetType="{x:Type local:FlexHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlexHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{TemplateBinding TitleWidth}"/>
                            <ColumnDefinition Width="{TemplateBinding SubtitleWidth}"/>
                        </Grid.ColumnDefinitions>

                        <Grid Grid.Column="0" Background="{TemplateBinding TitleBackground}">
                            <Label x:Name="TitleLabel" Content="{TemplateBinding Title}" Style="{StaticResource FlexHeaderLabelStyle}"/>
                            <Image x:Name="TitleImage" Source="{TemplateBinding Icon}" Style="{StaticResource FlexHeaderImageStyle}"/>
                        </Grid>

                        <Grid Grid.Column="1" Background="{TemplateBinding SubtitleBackground}">
                            <Label x:Name="SubTitleLabel" Content="{TemplateBinding Subtitle}" Style="{StaticResource FlexHeaderLabelStyle}"/>
                            <ContentPresenter/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region FlexBreadcrumbs-->
    
    <Style TargetType="{x:Type local:FlexBreadcrumbs}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlexBreadcrumbs}">
                    <Grid Style="{StaticResource FlexBreadcrumbsStyle}">
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion -->

    <!--#region FlexBreadcrumb-->
    
    <Style TargetType="{x:Type local:FlexBreadcrumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlexBreadcrumb}">
                    <StackPanel Orientation="Horizontal">
                        <Border x:Name="Outer" Style="{StaticResource FlexBreadcrumbStyle}">
                            <Label x:Name="Inner" 
                               Style="{StaticResource FlexBreadcrumbLabelStyle}"
                               Content="{Binding Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}}"/>
                        </Border>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation To="Transparent"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        Storyboard.TargetName="Outer"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </StackPanel>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->
    
</ResourceDictionary>
